# Project: E-commerce AI Data Agent 🚀

-------------------------------------------------------------

## Objective: Natural Language to Data Insights ✨
- Goal: Answer any e-commerce data question in plain English.
- Input: User questions, other platforms api questions.
- Output: Accurate answers with visualized results.
- Bonus: Live UI interaction & external API access.

-------------------------------------------------------------

## Architecture: The Brains Behind the Insights 🧠
- Modular & Efficient: Cleanly separates concerns.
- User Interface (Frontend): Our interactive web app.
- Flask Backend: Orchestrates the magic.
- Google Gemini LLM: Translates questions & humanizes answers.
- SQLite Database: Securely stores our e-commerce data.

-------------------------------------------------------------

## Live Demo: The User Experience (UI) 🌟

### Part 1: First Impressions & Core Flow

- **Engaging UI Load**:
    - Smooth page transitions 💫
    - Animated main title (Floating effect) 📊
    - Dynamic "Ask question" label (Typing reveal) 💬
    - Dark Mode / Light Mode toggle (Seamless switching) 💡🌙

- **Asking a Simple Question**:
    - "What was the total ad spend for item 4 on 2025-06-01?"
    - **Interactive Input**: Button blinks while typing.
    - **Progressive Loading**: Watch messages change! 🔍📊🧠💬📈
    - **Auto-Scroll**: Page smoothly navigates to results.

- **Output Breakdown**:
    - Your Question: Clearly displayed.
    - Generated SQL Query: Precise, color-coded SQL. 💻
    - Raw Query Results: Clean table from DB.  tabular-data
    - AI Answer: Human-readable, engaging typing animation. 🤖

### Part 2: Advanced Queries & Visualizations (Charts)
- **Time Series Example**:
    - "Show the total impressions and clicks for item 4 over the days in June 2025."
    - **Line Chart**: Visualize trends over time. 📈
- **Categorical Comparison**:
    - "What were the total ad sales for each item on 2025-06-01?"
    - **Bar Chart**: Compare performance across items. 📊
- **Single-Entry Comparison**:
    - "Show me the ad sales and total sales for item 4 on 2025-06-01."
    - **Bar Chart**: Compare metrics for a single entity. 📊
- **Distribution**:
    - "What are the various ad spend amounts for products on 2025-06-01?"
    - **Histogram**: Understand data distribution. 📉

-------------------------------------------------------------

## Meeting Project Deliverables (The Specifics) ✅

### Question 1: "What is my total sales?"
- **Answer:** Total sales amount. (No chart, single value).

### Question 2: "Calculate the RoAS (Return on Ad Spend)."
- **Answer:** RoAS percentage. (No chart, single value).

### Question 3: "Which product had the highest CPC (Cost Per Click)?"
- **Answer:** Item ID and its CPC.
- **Visualization:** Bar chart if multiple products/CPCs are shown for comparison. 📊

-------------------------------------------------------------

## Under the Hood: Technical Excellence ⚙️

### 1. Data Structuring & Management
- Raw CSVs to SQLite: Clean `schema.sql` for clear data types.
- Efficient `init_db.py`: Fast DB setup & data loading.

### 2. LLM Integration (Google Gemini)
- Free LLM API: Using Gemini 1.5 Flash / Pro (via `aistudio.google.com`).
- Intelligent SQL Generation: `gemini_agent.py` with finely-tuned prompts.
    - **Key**: Explicit schema, strict output rules, few-shot examples (demonstrating common metrics like RoAS, CPC).
- Humanized Responses: `gemini_agent.py` processes raw results into natural language.
    - **Key**: Contextual understanding of question, SQL, and data.
- Modular Prompts: `app/llm/prompts/` folder for clean organization.

### 3. Progressive API Architecture
- Frontend (`main.js`): Orchestrates sequential API calls for step-by-step updates.
    - Calls `/api/generate_sql`, then `/api/execute_query`, etc.
    - Shows progress immediately.
- Backend (`app/main.py`): Dedicated micro-endpoints for each processing stage.
    - Returns partial JSON responses.
- Benefits: Enhanced user engagement, clearer error isolation.

### 4. Visualization & UI
- Plotly Integration: `app/utils/charts.py` intelligently picks chart types (bar, line, scatter, histogram).
    - **Key**: Robust data type detection, ID-like numeric column handling.
    - Charts render dynamically, responsive within container, no overflow.
- Clean & Modern UI:
    - Custom CSS (color palette, spacing, shadows).
    - Smooth CSS animations (fade-in, float, label reveal, button blink).
    - Theme switching (Dark/Light mode).

### 5. External API Access (`/api/ask`)
- Dedicated endpoint for external applications.
- Returns comprehensive JSON: `question`, `sql_query`, `answer`, `raw_results`, `html_table`, `chart_data_json`.
- Makes our agent reusable for other services.

-------------------------------------------------------------

## Conclusion & Future Scope 💡
- **Summary**: An intuitive, accurate, and visually rich AI agent for e-commerce data.
- **Future**: Contextual chat history, self-correcting SQL, user-defined chart types.

-------------------------------------------------------------
